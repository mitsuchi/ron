op 90 : _ _
op 80 : integer _
op 60 : _ + _
op 60 : _ - _
op 60 : _ < _
op 60 : _ >= _
op 50 : _ -> _    
op 40 : _ is _
op 40 : _ = _
op 40 : _ \= _
op 30 : _ , _
op 25 : [ _ |- _ ]
op 20 : if _ then _ else _
op 20 : let rec _ _ = _ in _
op 10 : _ |- _ => _

c |- n => n {
    <integer n>
}
c |- e1 + e2 => v {
    c |- e1 => v1
    c |- e2 => v2
    <v is v1 + v2>
}
c |- e1 - e2 => v {
    c |- e1 => v1
    c |- e2 => v2
    <v is v1 - v2>
}
c |- e1 < e2 => true {
    c |- e1 => v1
    c |- e2 => v2
    <v1 < v2>
}
c |- e1 < e2 => false {
    c |- e1 => v1
    c |- e2 => v2
    <v1 >= v2>
}
c |- if e1 then e2 else e3 => v {
    c |- e1 => true
    c |- e2 => v
}
c |- if e1 then e2 else e3 => v {
    c |- e1 => false
    c |- e3 => v
}

x = v |- x => v
c, x = v |- x => v
c, y = v' |- x => v {
    <x \= y>
    c |- x => v
}

c |- let rec f x = e1 in e2 => v {
    c, f = [c |- f = x -> e1] |- e2 => v
}
c |- e1 e2 => v { 
    c |- e1 => [c2 |- f = x -> e0]
    c |- e2 => v2
    c2, f = [c2 |- f = x -> e0] , x = v2 |- e0 => v
}

main {
    0 |- let rec fib n = if n < 2 then n else fib (n - 1) + fib (n - 2) in fib 9 => v
}