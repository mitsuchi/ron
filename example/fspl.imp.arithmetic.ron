# IMP of the book "the Formal Semantics of Programmming Languages"

op 80 : atom _
op 80 : integer _
op 70 : _ * _
op 60 : _ + _
op 60 : _ - _
op 60 : _ < _
op 40 : _ = _
op 40 : _ := _
op 40 : _ >= _
op 40 : _ \= _
op 40 : _ is _
op 40 : ~ _
op 30 : _ and _
op 35 : _ : _
op 30 : _ , _
op 20 : _ or _
op 15 : _ // _
op 10 : sub _ [ _ / _ ] => _
op 10 : < _ , _ > -> _

syntax {
    a ::= n | X | a + a | a - a | a * a
    b ::= true | false | a = a | a < a | ~ b | b and b | b or b
    n ::= <integer>
    X ::= <atom>
    constants ::= s0
}

# evaluation of numbers
<n, s> -> n

# evaluation of sums
<a0 + a1, s> -> n {
    <a0, s> -> n0  ;  <a1, s> -> n1  ;  <n is n0 + n1>
}

# evaluation of subtractions
<a0 - a1, s> -> n {
    <a0, s> -> n0  ;  <a1, s> -> n1  ;  <n is n0 - n1>
}

# evaluation of products
<a0 * a1, s> -> n {
    <a0, s> -> n0  ;  <a1, s> -> n1  ;  <n is n0 * n1>
}

# evaluation of boolean expresssions

<true, s> -> true
<false, s> -> false
<a0 = a1, s> -> true {
    <a0, s> -> n0  ; <a1, s> -> n1 ; <n0 is n1>
}
<a0 = a1, s> -> false {
    <a0, s> -> n0  ; <a1, s> -> n1 ; <n0 \= n1>
}
<a0 < a1, s> -> true {
    <a0, s> -> n0  ; <a1, s> -> n1 ; <n0 < n1>
}
<a0 < a1, s> -> false {
    <a0, s> -> n0  ; <a1, s> -> n1 ; <n0 >= n1>
}
< ~ b, s> -> true {
    <b, s> -> false
}
< ~ b, s> -> false {
    <b, s> -> true
}
<b0 and b1, s> -> b {
    <b0, s> -> b0'
    <b1, s> -> b1'
    b0' and b1' is b

}
false and false is false
false and true is false
true and false is false
true and true is true

<b0 or b1, s> -> b {
    <b0, s> -> b0'
    <b1, s> -> b1'
    b0' or b1' is b
}
false or false is false
false or true is true
true or false is true
true or true is true

# status and variables
<X, X = v> -> v
<X, c : X = v> -> v
<X, c : y = v'> -> v {
    <atom X>
    <X \= y>
    <X, c> -> v
}

# rules for commands
<skip, s> -> s

<X := a, s1> -> s2 {
    <a, s1> -> m
    sub s1 [m / X] => s2
}

# substitution
sub 0 [m / X] => 0
sub s : X = n [m / X] => s : X = m
sub s1 : X = n [m / y] => s2 : X = n {
    <X \= y>
    sub s1 [m / y] => s2
}

# sequence
<c0 // c1, s1> -> s2 {
    <c0, s1> -> s3
    <c1, s3> -> s2
}

main {
    <q := 20 // p := 10, 0 : p = 1 : q = 2> -> v
}